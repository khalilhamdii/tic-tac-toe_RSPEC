#!/usr/bin/env ruby
require './environment.rb'
require 'player'
require 'board'
require 'game'

player1 = Player.new
player2 = Player.new
game_board = Board.new
input = Proc.new {gets.chomp}

puts 'Welcome to the Tic-Tac_Toe game!'

print 'Player 1, please enter your name: '
player1.name = gets.chomp.capitalize
print 'Player 2, please provide your name: '
player2.name = gets.chomp.capitalize
player2.name = "#{player2.name}2" if player2.name == player1.name
puts "Welcome #{player1.name} and #{player2.name}"

puts "#{player1.name} please choose a token [ X or O ]"

token_invalid = true
while token_invalid do
  player1.token = gets.chomp.upcase
  if player1.token == 'X' or player1.token == 'O'
    token_invalid = false
  else
    puts 'Token should be X or O'
  end
  break if token_invalid == false
end

player2.token = player1.token == 'X' ? 'O' : 'X'

puts "Great! #{player1.name} takes #{player1.token} and #{player2.name} takes #{player2.token}"
puts "\nLet the game begin!!!"

# Display updated board
print game_board.display
# puts " ###"
# Take input from player 1
puts "#{player1.name} please make your move :"
$player_token = player1.token
game_board.update(&input)
# Display updated board
print game_board.display
# Take input from player 2
puts "#{player2.name} please make your move :"
$player_token = player2.token
game_board.update(&input)
# Display updated board
print game_board.display




# Get Player1 name
# puts 'Enter player 1 name'
# player1 = gets.chomp
# Get Player2 name
# puts 'Enter player 2 name'
# player2 = gets.chomp
# Tell Player1 to choose
# puts 'Please select X or O'
# player1_choice = gets.chomp
# Assign the available choice to Player2
# player2_choice = player1_choice == 'X' ? 'O' : 'X'
# Create a variable for all available positions
# available_positions = (1..9)
# Start a loop to check if game is on, then perform the following steps
# game_on = true
# while game_on
# First, display an empty board to show players available positions
# Ask Player1 for first move position
# puts "#{player1} please indicate your desired move position"
# Gets the position player has chosen and removes it from the possible positions for the next player
# player1_position = gets.chomp.to_i
# Checks if position is valid and updates the available positions
# Display the game board with the updated position for Player2
# Repeats same process for Player2
# If any of the two players meet the 'WIN condition' (horizontal, vertical or diagonal alignment), display WIN
# if WIN or DRAW
# if WIN
# Print the winning player
# else
# Print draw
# end
# game_on = false
# end
# end
